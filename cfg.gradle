

ext {
    applyPluginApp = this.&ApplyPluginApp
    applyPluginLib = this.&ApplyPluginLib
//    Android = this.&Android
//    Dependencies = this.Dependencies
}

def ApplyPluginApp(Project pro) {
    pro.apply plugin: Plugins.application
    pro.apply plugin: Plugins.kotlin_android
//        apply plugin: Plugins.kotlin_android_extensions 已经停止维护,用viewbinding取代
    pro.apply plugin: Plugins.kotlin_kapt
    //lib不需要指定appid
    pro.android.defaultConfig.applicationId Version.applicationId
    pro.android.kotlinOptions {
        jvmTarget = '1.8'
    }
    Apply(pro)

}

def ApplyPluginLib(Project pro) {
    pro.apply plugin: Plugins.library
    Apply(pro)
}

def Apply(Project pro) {
    Android(pro)
    configSigning(pro)
    DepProject(pro)
    Deps(pro)
}
def Android(Project pro) {
    pro.android {
        compileSdkVersion Version.compileSdkVersion
        defaultConfig {
            minSdkVersion Version.minSdkVersion
            targetSdkVersion Version.targetSdkVersion
            versionCode Version.versionCode
            versionName Version.versionName
            multiDexEnabled true
            ndk {
                abiFilters 'armeabi-v7a'
            }
//            javaCompileOptions {
//                annotationProcessorOptions {
//                    arguments = [moduleName: project.getName()]
//                }
//            }
        }
        //java版本
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        //资源配置路径
        sourceSets {
            main {
                if (isModule.toBoolean()) {
                    manifest.srcFile 'src/main/module/AndroidManifest.xml'
                } else {
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                    //集成开发模式下排除debug文件夹中的所有Java文件
                    java {
                        exclude 'debug/**'
                    }
                }

//            res.srcDirs = [
//                    'src/main/res',
//                    'src/main/res/layout',
//                    'src/main/res/layout/view',
//                    'src/main/res/layout/adapter',
//                    'src/main/res/layout/include',
//                    'src/main/res/layout/other',
//                    'src/main/res/layout/values'
//            ]
                jniLibs.srcDirs = ['libs']
            }
        }

        //混淆
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
        viewBinding {
            enabled = true
        }
        lintOptions {
            // true--关闭lint报告的分析进度
            quiet true
            // true--错误发生后停止gradle构建
            abortOnError false
            // true--只报告error
            ignoreWarnings true
            // true--忽略有错误的文件的全/绝对路径(默认是true)
            //absolutePaths true
            // true--检查所有问题点，包含其他默认关闭项
            checkAllWarnings true
            // true--所有warning当做error
            warningsAsErrors true
            // 关闭指定问题检查
            disable 'TypographyFractions', 'TypographyQuotes'
            // 打开指定问题检查
            enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
            // 仅检查指定问题
            check 'NewApi', 'InlinedApi'
            // true--error输出文件不包含源码行号
            noLines true
            // true--显示错误的所有发生位置，不截取
            showAll true
            // 回退lint设置(默认规则)
//            lintConfig file("default-lint.xml")
            // true--生成txt格式报告(默认false)
            textReport true
            // 重定向输出；可以是文件或'stdout'
            textOutput 'stdout'
            // true--生成XML格式报告
            xmlReport false
            // 指定xml报告文档(默认lint-results.xml)
            xmlOutput file("lint-report.xml")
            // true--生成HTML报告(带问题解释，源码位置，等)
            htmlReport true
            // html报告可选路径(构建器默认是lint-results.html )
            htmlOutput file("lint-report.html")
            //  true--所有正式版构建执行规则生成崩溃的lint检查，如果有崩溃问题将停止构建
            checkReleaseBuilds true
            // 在发布版本编译时检查(即使不包含lint目标)，指定问题的规则生成崩溃
            fatal 'NewApi', 'InlineApi'
            // 指定问题的规则生成错误
            error 'Wakelock', 'TextViewEdits'
            // 指定问题的规则生成警告
            warning 'ResourceAsColor'
            // 忽略指定问题的规则(同关闭检查)
            ignore 'TypographyQuotes'
        }

    }
}


/**
 * 添加依赖model
 * @param pro
 * @return
 */
def DepProject(Project pro) {
    pro.dependencies {
        def depP = pro.ext.depProject
        if (depP.size > 0) {
            depP.each {
                println("依赖-project------------" + it + "-------\n")
                implementation project(it)
            }
        } else {
            println("无依赖-project-------------------\n")
        }
    }
}

/**
 * 添加依赖model
 * @param pro
 * @return
 */
def Deps(Project pro) {
    pro.dependencies {
        api fileTree(dir: 'libs', include: ['*.jar'])
        def dep = pro.deps
        if (dep.size > 0) {
            dep.each {
                println("依赖-Deps------------" + it + "-------\n")
                api(it)
            }
        } else {
            println("无依赖-Deps-------------------\n")
        }

    }
}
/**
 * 配置打包key
 * @param pro
 * @return
 */
def configSigning(Project pro) {
    File signPropertiesFile = file('../resources/keystore.properties')
    if (!signPropertiesFile.exists()) return
    pro.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            release {
                storeFile file(properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
            debug {
                storeFile file(properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }

    }
}

